package io.github.squat_team.util;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import io.github.squat_team.performance.peropteryx.configuration.DesigndecisionConfigImproved;

/**
 * Modifies the Designdecision file, which is usually automatically generated by
 * PerOpteryx. In this way, custom values for the cpu clock rates can be set.
 * 
 * Call {@link #modify()} to apply the modification.
 */
public class DesigndecisionFileModifier {
	private static final String DOF_DEGREEOFFREEDOM_TAG_NAME = "degreesOfFreedom";
	private static final String DOF_CPU_ATTRIBUTE_NAME = "xsi:type";
	private static final String DOF_CPU_ATTRIBUTE_TEXT = "specific:ContinuousProcessingRateDegree";
	private static final String DOF_CPU_RESOURCE_TYPE_TAG_NAME = "processingresourcetype";
	private static final String DOF_CPU_RESOURCE_TYPE_ID = "_oro4gG3fEdy4YaaT-RYrLQ";
	private static final String DOF_PRIMARY_CHANGED_TAG_NAME = "primaryChanged";
	private static final String DOF_LINK_ATTRIBUTE_NAME = "href";
	private static final String DOF_CPU_LOWER_LIMIT_ATTRIBUTE_NAME = "from";
	private static final String DOF_CPU_UPPER_LIMIT_ATTRIBUTE_NAME = "to";

	private final File designdecisionFile;
	private final DesigndecisionConfigImproved designdecisionConfig;

	/**
	 * Creates a new modifier. A modifier is always bound to a particular
	 * designdecision file and a particular configuration.
	 * 
	 * @param designdecisionFile
	 *            the designdecision file to modify. The file must exist and be
	 *            accessible.
	 * @param designdecisionConfig
	 *            the configuration that specifies the values that should be set.
	 */
	public DesigndecisionFileModifier(File designdecisionFile, DesigndecisionConfigImproved designdecisionConfig) {
		this.designdecisionFile = designdecisionFile;
		this.designdecisionConfig = designdecisionConfig;
	}

	/**
	 * Runs the modification process for the file.
	 */
	public void modify() {
		Document document = setupDOMTree();
		updateCpuClockRate(document);
		writeUpdatedFile(document);
	}

	/**
	 * Reads in the file and creates a DOM tree.
	 * 
	 * @return the DOM tree document or null.
	 */
	private Document setupDOMTree() {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		try {
			DocumentBuilder builder = factory.newDocumentBuilder();
			return builder.parse(designdecisionFile);
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * Updates the CPU clock rates as specified in the configuration.
	 * 
	 * @param document
	 *            the designdecision file as DOM tree.
	 */
	private void updateCpuClockRate(Document document) {
		document.getDocumentElement().normalize();
		List<Element> cpuDegreeOfFreedoms = findAllCPUDegreeOfFreedom(document);
		updateProcessingRateBounds(cpuDegreeOfFreedoms);
	}

	/**
	 * Updates the designdecision file. All changes in the DOM tree are written to
	 * the file.
	 * 
	 * @param document
	 *            the designdecision file as DOM tree.
	 */
	private void writeUpdatedFile(Document document) {
		document.getDocumentElement().normalize();
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer;
		try {
			transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(document);
			StreamResult result = new StreamResult(designdecisionFile);
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
			transformer.transform(source, result);
		} catch (TransformerConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (TransformerException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * Searches for degrees of freedom that specify the clock rate of a CPU.
	 * 
	 * @param document
	 *            the designdecision file as DOM tree.
	 * @return All degree of freedom elements that specify the clock rate of a CPU.
	 */
	private List<Element> findAllCPUDegreeOfFreedom(Document document) {
		List<Element> cpuDegreesOfFreedom = new ArrayList<>();
		NodeList degreesOfFreedom = document.getElementsByTagName(DOF_DEGREEOFFREEDOM_TAG_NAME);

		// iterate over all degree of freedom elements
		for (int i = 0; i < degreesOfFreedom.getLength(); i++) {
			Element degreeOfFreedom = (Element) degreesOfFreedom.item(i);
			// check for cpu clock rate attribute
			if (degreeOfFreedom.getAttribute(DOF_CPU_ATTRIBUTE_NAME).equals(DOF_CPU_ATTRIBUTE_TEXT)) {
				Element processingresourcetype = (Element) degreeOfFreedom
						.getElementsByTagName(DOF_CPU_RESOURCE_TYPE_TAG_NAME).item(0);
				// check for cpu resource type
				if (processingresourcetype.getAttribute(DOF_LINK_ATTRIBUTE_NAME).contains(DOF_CPU_RESOURCE_TYPE_ID)) {
					cpuDegreesOfFreedom.add(degreeOfFreedom);
				}
			}
		}
		return cpuDegreesOfFreedom;
	}

	/**
	 * Sets all specified CPU clock rates to the custom values.
	 * 
	 * @param cpuDegreesOfFreedom
	 *            All degree of freedom elements that specify the clock rate of a
	 *            CPU or at least the ones that should be modified.
	 */
	private void updateProcessingRateBounds(List<Element> cpuDegreesOfFreedom) {
		// first iterate over all degree of freedom elements, then search for the ones
		// specified in the configuration.
		for (Element cpuDegreeOfFreedom : cpuDegreesOfFreedom) {
			Element primarychanged = (Element) cpuDegreeOfFreedom.getElementsByTagName(DOF_PRIMARY_CHANGED_TAG_NAME)
					.item(0);
			for (String serverId : designdecisionConfig.getConfiguredServerIds()) {
				if (primarychanged.getAttribute(DOF_LINK_ATTRIBUTE_NAME).contains(serverId)) {
					updateProcessingRateBound(cpuDegreeOfFreedom, serverId);
					break;
				}
			}

		}
	}

	/**
	 * Sets the specified CPU clock rate for a particular CPU.
	 * 
	 * @param degreeOfFreedom
	 *            the degree of freedom associated with the CPU to update.
	 * @param serverId
	 *            the ID of the server that contains the CPU to update.
	 */
	private void updateProcessingRateBound(Element degreeOfFreedom, String serverId) {
		degreeOfFreedom.setAttribute(DOF_CPU_LOWER_LIMIT_ATTRIBUTE_NAME,
				designdecisionConfig.getLowerLimit(serverId).toString());
		degreeOfFreedom.setAttribute(DOF_CPU_UPPER_LIMIT_ATTRIBUTE_NAME,
				designdecisionConfig.getUpperLimit(serverId).toString());
	}

}
